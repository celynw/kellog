name: kellog
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      python-version:
        description: Python version
        required: true
        type: choice
        options:
          - 3.7
          - 3.8
          - 3.9
          - 3.10
          - 3.11
          - 3.12

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{fromJson(github.event.inputs.python-version || '["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]')}}
    steps:
    - uses: actions/checkout@v4
    - name: Run Ruff checks
      uses: chartboost/ruff-action@v1
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install with dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
    - name: Unit tests
      run: pytest --disable-warnings -vvs kellog/tests

  publish:
    name: Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - name: Install with dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  release:
    name: Create release
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
    - name: Extract changelog
      id: extract_changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        CHANGELOG=$(awk -v version="$VERSION" '/^## /{p=0} $0 ~ "^## " version{p=1} p' CHANGELOG.md)
        echo ::set-output name=CHANGELOG::"$CHANGELOG"
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.extract_changelog.outputs.CHANGELOG }}
        draft: true
        prerelease: false
